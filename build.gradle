buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'signing'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group = config.mod_group
archivesBaseName = config.mod_archive_name

minecraft {
    runDir = "run/assets"
    version = config.minecraft_version + "-" + config.forge_version
    replaceIn config.mod_info_path
    replace "%MOD_VERSION%", config.mod_version
    replace "%FORGE_VERSION%", config.forge_version
}

def final_display_version = hasProperty("display_version") ? display_version : config.minecraft_version
version = "${final_display_version}-${config.mod_version}.B${System.getenv("BUILD_NUMBER") ?: 0}"

processResources {
    // this will ensure that this task is redone when the versions change.
	inputs.property "mod_version", config.mod_version
	inputs.property "minecraft_version", config.minecraft_version
    
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'mod_version':config.mod_version, 'minecraft_version':config.minecraft_version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }  
}

task signJar(dependsOn: 'reobf'){
    doLast {
        ant.signjar(
            destDir: jar.destinationDir,
            jar: jar.getArchivePath(),
            alias: findProperty('keyStoreAlias') ?: '',
            keystore: findProperty('keyStore') ?: '',
            storepass: findProperty('keyStorePass') ?: '',
            digestalg: findProperty('signDigestAlg') ?: '',
            tsaurl: findProperty('signTSAurl') ?: '',
            verbose: true
            )
    }
}
